package generate

import (
	"github.com/stretchr/testify/require"
	"github.com/terryhay/argtools/internal/generator/configYaml"
	"github.com/terryhay/argtools/pkg/argParserConfig"
	"testing"
)

func TestGenerate(t *testing.T) {
	t.Parallel()

	command := configYaml.Command("cmd")
	additionalCommand := configYaml.Command("addcmd")
	commandDescriptionHelpInfo := "command description help info"

	helpCommand := configYaml.Command("help")
	additionalHelpCommand := configYaml.Command("addhelp")

	requiredFlag1 := "-" + configYaml.Flag("-rf1")
	requiredFlag1Description := &configYaml.FlagDescription{
		Flag: requiredFlag1,
		ArgumentsDescription: &configYaml.ArgumentsDescription{
			AmountType: argParserConfig.ArgAmountTypeSingle,
			DefaultValues: []string{
				"f1DefValue",
			},
			AllowedValues: []string{
				"f1AllValue",
			},
		},
	}

	requiredFlag2 := "-" + configYaml.Flag("-rf2")
	requiredFlag2Description := &configYaml.FlagDescription{
		Flag: requiredFlag2,
		ArgumentsDescription: &configYaml.ArgumentsDescription{
			AmountType: argParserConfig.ArgAmountTypeList,
			DefaultValues: []string{
				"f2DefValue",
			},
			AllowedValues: []string{
				"f2AllValue",
			},
		},
	}

	optionalFlag1 := "-" + configYaml.Flag("-of1")
	optionalFlag1Description := &configYaml.FlagDescription{
		Flag: optionalFlag1,
	}

	optionalFlag2 := "-" + configYaml.Flag("-of2")
	optionalFlag2Description := &configYaml.FlagDescription{
		Flag: optionalFlag2,
	}

	config := &configYaml.Config{
		AppHelpDescription: &configYaml.AppHelpDescription{},
		HelpCommandDescription: &configYaml.HelpCommandDescription{
			Command: helpCommand,
			AdditionalCommands: []configYaml.Command{
				additionalHelpCommand,
			},
		},
		NamelessCommandDescription: &configYaml.NamelessCommandDescription{
			ArgumentsDescription: &configYaml.ArgumentsDescription{},
			RequiredFlags: []configYaml.Flag{
				requiredFlag1,
				requiredFlag2,
			},
			OptionalFlags: []configYaml.Flag{
				optionalFlag1,
				optionalFlag2,
			},
		},
		CommandDescriptions: []*configYaml.CommandDescription{
			{
				Command: command,
				AdditionalCommands: []configYaml.Command{
					additionalCommand,
				},
				DescriptionHelpInfo: commandDescriptionHelpInfo,
				ArgumentsDescription: &configYaml.ArgumentsDescription{
					AmountType: argParserConfig.ArgAmountTypeSingle,
					DefaultValues: []string{
						"cmdDefValue",
					},
					AllowedValues: []string{
						"cmdAllValue",
					},
				},
				RequiredFlags: []configYaml.Flag{
					requiredFlag1,
					requiredFlag2,
				},
				OptionalFlags: []configYaml.Flag{
					optionalFlag1,
					optionalFlag2,
				},
			},
			{
				// fake empty command
				ArgumentsDescription: &configYaml.ArgumentsDescription{
					AmountType: argParserConfig.ArgAmountTypeList,
					DefaultValues: []string{
						"fakeEmptyCommandDefValue",
					},
					AllowedValues: []string{
						"fakeEmptyCommandAllValue",
					},
				},
			},
		},
		FlagDescriptions: []*configYaml.FlagDescription{
			requiredFlag1Description,
			requiredFlag2Description,
			optionalFlag1Description,
			optionalFlag2Description,
		},
	}

	argParserFileText := Generate(
		config,
		map[configYaml.Flag]*configYaml.FlagDescription{
			requiredFlag1: requiredFlag1Description,
			requiredFlag2: requiredFlag2Description,
			optionalFlag1: optionalFlag1Description,
			optionalFlag2: optionalFlag2Description,
		})

	expectedArgParserFileText := `// This code was generated by argtools.generator. DO NOT EDIT

package argTools

import (
	"github.com/terryhay/argtools/internal/argParserImpl"
	"github.com/terryhay/argtools/pkg/argParserConfig"
	"github.com/terryhay/argtools/pkg/argtoolsError"
	"github.com/terryhay/argtools/pkg/helpPrinter"
	"github.com/terryhay/argtools/pkg/parsedData"
)

const (
	// CommandIDNamelessCommand - 
	CommandIDNamelessCommand argParserConfig.CommandID = iota + 1
	//  - 
	
	// CommandIDCmd - command description help info
	CommandIDCmd
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo
)

const (
	//  - 
	 argParserConfig.Command = ""
	// CommandAddcmd - command description help info
	CommandAddcmd = "addcmd"
	// CommandAddhelp - print help info
	CommandAddhelp = "addhelp"
	// CommandCmd - command description help info
	CommandCmd = "cmd"
	// CommandHelp - print help info
	CommandHelp = "help"
)

const (
	// FlagOf1 - 
	FlagOf1 argParserConfig.Flag = "--of1"
	// FlagOf2 - 
	FlagOf2 = "--of2"
	// FlagRf1 - 
	FlagRf1 = "--rf1"
	// FlagRf2 - 
	FlagRf2 = "--rf2"
)

// Parse - processes command line arguments
func Parse(args []string) (res *parsedData.ParsedData, err *argtoolsError.Error) {
	appArgConfig := argParserConfig.NewArgParserConfig(
		// appDescription
		argParserConfig.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: nil,
		},
		// flagDescriptions
		map[argParserConfig.Flag]*argParserConfig.FlagDescription{
			FlagRf1: {
				DescriptionHelpInfo:  "",
				ArgDescription: &argParserConfig.ArgumentsDescription{
					AmountType:              argParserConfig.ArgAmountTypeSingle,
					SynopsisHelpDescription: "",
					DefaultValues: []string{
						"f1DefValue",
					},
					AllowedValues: map[string]bool{
						"f1AllValue": true,
					},
				},
			},
			FlagRf2: {
				DescriptionHelpInfo:  "",
				ArgDescription: &argParserConfig.ArgumentsDescription{
					AmountType:              argParserConfig.ArgAmountTypeList,
					SynopsisHelpDescription: "",
					DefaultValues: []string{
						"f2DefValue",
					},
					AllowedValues: map[string]bool{
						"f2AllValue": true,
					},
				},
			},
			FlagOf1: {
				DescriptionHelpInfo:  "",
			},
			FlagOf2: {
				DescriptionHelpInfo:  "",
			},
		},
		// commandDescriptions
		[]*argParserConfig.CommandDescription{
			{
				ID:                  CommandIDCmd,
				DescriptionHelpInfo: "command description help info",
				Commands: map[argParserConfig.Command]bool{
					CommandCmd: true,
					CommandAddcmd: true,
				},
				RequiredFlags: map[argParserConfig.Flag]bool{
					FlagRf1: true,
					FlagRf2: true,
				},
				OptionalFlags: map[argParserConfig.Flag]bool{
					FlagOf1: true,
					FlagOf2: true,
				},
			},
			{
				ID:                  ,
				DescriptionHelpInfo: "",
				Commands: map[argParserConfig.Command]bool{
					: true,
				},
			},
		},
		// helpCommandDescription
		argParserConfig.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[argParserConfig.Command]bool{
				"help": true,
				"addhelp": true,
			},
		),
		// namelessCommandDescription
		argParserConfig.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"",
			&argParserConfig.ArgumentsDescription{
				AmountType:              argParserConfig.ArgAmountTypeNoArgs,
				SynopsisHelpDescription: "",
			},
			map[argParserConfig.Flag]bool{
				FlagRf1: true,
				FlagRf2: true,
			},
			map[argParserConfig.Flag]bool{
				FlagOf1: true,
				FlagOf2: true,
			},
		))

	if res, err = argParserImpl.NewCmdArgParserImpl(appArgConfig).Parse(args); err != nil {
		return nil, err
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		helpPrinter.PrintHelpInfo(appArgConfig)
		return nil, nil
	}

	return res, nil
}
`
	require.Equal(t, expectedArgParserFileText, argParserFileText)
}

func TestGenerateWithoutNamelessCommand(t *testing.T) {
	t.Parallel()

	descriptionHelpInfo := "command description help info"

	helpCommand := configYaml.Command("help")
	additionalHelpCommand := configYaml.Command("addhelp")

	argParserFileText := Generate(
		&configYaml.Config{
			AppHelpDescription: &configYaml.AppHelpDescription{
				DescriptionHelpInfo: []string{
					descriptionHelpInfo,
				},
			},
			HelpCommandDescription: &configYaml.HelpCommandDescription{
				Command: helpCommand,
				AdditionalCommands: []configYaml.Command{
					additionalHelpCommand,
				},
			},
		},
		nil)

	require.Equal(t, `// This code was generated by argtools.generator. DO NOT EDIT

package argTools

import (
	"github.com/terryhay/argtools/internal/argParserImpl"
	"github.com/terryhay/argtools/pkg/argParserConfig"
	"github.com/terryhay/argtools/pkg/argtoolsError"
	"github.com/terryhay/argtools/pkg/helpPrinter"
	"github.com/terryhay/argtools/pkg/parsedData"
)

const (
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo argParserConfig.CommandID = iota + 1
)

const (
	// CommandAddhelp - print help info
	CommandAddhelp argParserConfig.Command = "addhelp"
	// CommandHelp - print help info
	CommandHelp = "help"
)

// Parse - processes command line arguments
func Parse(args []string) (res *parsedData.ParsedData, err *argtoolsError.Error) {
	appArgConfig := argParserConfig.NewArgParserConfig(
		// appDescription
		argParserConfig.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: []string{
				"command description help info",
			},
		},
		// flagDescriptions
nil,
		// commandDescriptions
		nil,
		// helpCommandDescription
		argParserConfig.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[argParserConfig.Command]bool{
				"help": true,
				"addhelp": true,
			},
		),
		// namelessCommandDescription
		nil)

	if res, err = argParserImpl.NewCmdArgParserImpl(appArgConfig).Parse(args); err != nil {
		return nil, err
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		helpPrinter.PrintHelpInfo(appArgConfig)
		return nil, nil
	}

	return res, nil
}
`, argParserFileText)
}

func TestGenerateWithoutHelpCommandDescription(t *testing.T) {
	t.Parallel()

	argParserFileText := Generate(
		&configYaml.Config{
			AppHelpDescription: &configYaml.AppHelpDescription{
				DescriptionHelpInfo: []string{
					"command description help info",
				},
			},
			NamelessCommandDescription: &configYaml.NamelessCommandDescription{
				DescriptionHelpInfo: "nameless command description help info",
			},
		},
		nil)

	require.Equal(t, `// This code was generated by argtools.generator. DO NOT EDIT

package argTools

import (
	"github.com/terryhay/argtools/internal/argParserImpl"
	"github.com/terryhay/argtools/pkg/argParserConfig"
	"github.com/terryhay/argtools/pkg/argtoolsError"
	"github.com/terryhay/argtools/pkg/helpPrinter"
	"github.com/terryhay/argtools/pkg/parsedData"
)

const (
	// CommandIDNamelessCommand - nameless command description help info
	CommandIDNamelessCommand argParserConfig.CommandID = iota + 1
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo
)

const (
	//  - print help info
	 argParserConfig.Command = ""
)

// Parse - processes command line arguments
func Parse(args []string) (res *parsedData.ParsedData, err *argtoolsError.Error) {
	appArgConfig := argParserConfig.NewArgParserConfig(
		// appDescription
		argParserConfig.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: []string{
				"command description help info",
			},
		},
		// flagDescriptions
nil,
		// commandDescriptions
		nil,
		// helpCommandDescription
nil
		// namelessCommandDescription
		argParserConfig.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"nameless command description help info",
nil,
nil,
nil,
		))

	if res, err = argParserImpl.NewCmdArgParserImpl(appArgConfig).Parse(args); err != nil {
		return nil, err
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		helpPrinter.PrintHelpInfo(appArgConfig)
		return nil, nil
	}

	return res, nil
}
`, argParserFileText)
}
